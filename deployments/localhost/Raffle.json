{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "Interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpKeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__notEnoughETHentered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__notOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__transferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "requestRaffleWinner",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSubscriptionId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x623102f41359c40f0ea69bc29e5dc97a729edcdfb79e1db1802ba34d4de1e2a4",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1281781",
    "logsBloom": "0x
    "blockHash": "0x96d15b5ee39cddbbd2d5bcb92482050164c5235d482c49a76988d11587eacec1",
    "transactionHash": "0x623102f41359c40f0ea69bc29e5dc97a729edcdfb79e1db1802ba34d4de1e2a4",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1281781",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "10000000000000000",
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    "1",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "9ae90038ebdb3c8069dfee8ac001a823",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"Interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpKeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__notEnoughETHentered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__notOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__transferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"requestRaffleWinner\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubscriptionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This is the function that Chainlink Keepers call they look for the `upkeepNeeded` to return true. The following should be true in order to return true 1.Our time interval should have passed. 2.The lottery should have atleast one player and some ETH 3.Our subscription should be funded with LINK 4.Lottery state should be open\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0xec8b7e3032e887dd0732d2a5f8552ddce64a99a81b0008ef0bcf6cad68a535fc\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"//Enter the lottery\\n//Pick a random winner\\n//Winner to be selected every X minutes -> Completely automated\\n\\n//Chainlink Oracle -> Randomness,Automated Execution (Chainlink Keepers)\\n\\n// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.4;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nerror Raffle__notEnoughETHentered();\\nerror Raffle__transferFailed();\\nerror Raffle__notOpen();\\nerror Raffle__UpKeepNotNeeded(uint balance, uint numPlayers, uint raffleState);\\n\\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    /*Type Declarations*/\\n    enum RaffleState {\\n        OPEN,\\n        CALCULATING\\n    } //uint 0 = OPEN, 1 = CALCULATING\\n\\n    //State Variables\\n    uint private immutable i_entranceFee;\\n    address payable[] private s_players;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_keyHash;\\n    uint64 private immutable i_subscriptionId;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant NUM_WORDS = 1;\\n\\n    //Lottery Variables\\n    address private s_recentWinner;\\n    RaffleState private s_RaffleState;\\n    uint private s_lastTimeStamp;\\n    uint private immutable i_Interval;\\n\\n    //Events\\n    event RaffleEnter(address indexed player);\\n    event requestRaffleWinner(uint indexed requestId);\\n    event WinnerPicked(address indexed winner);\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint entranceFee,\\n        bytes32 keyHash,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit,\\n        uint Interval\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_entranceFee = entranceFee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_keyHash = keyHash;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        s_RaffleState = RaffleState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        i_Interval = Interval;\\n    }\\n\\n    function enterRaffle() public payable {\\n        if (msg.value < i_entranceFee) {\\n            revert Raffle__notEnoughETHentered();\\n        }\\n\\n        if (s_RaffleState != RaffleState.OPEN) {\\n            revert Raffle__notOpen();\\n        }\\n\\n        s_players.push(payable(msg.sender));\\n        //Name events with the function name reversed\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n    /**\\n    @dev  This is the function that Chainlink Keepers call they look for the `upkeepNeeded` to return true.\\n    The following should be true in order to return true\\n    1.Our time interval should have passed.\\n    2.The lottery should have atleast one player and some ETH\\n    3.Our subscription should be funded with LINK\\n    4.Lottery state should be open\\n    */\\n\\n    //IN Official checkUpkeep function it is specified external i.e. it can only be called by external contracts so we change it to public so that our contract\\n    //can call it too\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    ) public view override returns (bool upkeepNeeded, bytes memory /* checkData */) {\\n        bool isOpen = (RaffleState.OPEN == s_RaffleState);\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_Interval);\\n        bool hasPlayers = (s_players.length > 0);\\n        bool hasBalance = (address(this).balance > 0);\\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\\n        //(block.timestamp - last block timestamp) > interval\\n    }\\n\\n    function performUpkeep(bytes calldata /* performData */) external override {\\n        (bool upKeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upKeepNeeded) {\\n            revert Raffle__UpKeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint(s_RaffleState)\\n            );\\n        }\\n        // Requests the random number\\n        s_RaffleState = RaffleState.CALCULATING;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_keyHash,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit requestRaffleWinner(requestId);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 /*requestId*/,\\n        uint[] memory randomWords\\n    ) internal override {\\n        uint indexOfWinner = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[indexOfWinner];\\n        s_recentWinner = recentWinner;\\n        s_RaffleState = RaffleState.OPEN;\\n        s_players = new address payable[](0);\\n        s_lastTimeStamp = block.timestamp;\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n\\n        if (!success) {\\n            revert Raffle__transferFailed();\\n        }\\n        emit WinnerPicked(recentWinner);\\n    }\\n\\n    function getEntranceFee() public view returns (uint) {\\n        return i_entranceFee;\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getPlayer(uint index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getRaffleState() public view returns (RaffleState) {\\n        return s_RaffleState;\\n    }\\n\\n    //pure is used here as NUM_WORDS is constant\\n    function getNumWords() public pure returns (uint) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getInterval() public view returns (uint) {\\n        return i_Interval;\\n    }\\n\\n    function getSubscriptionId() public view returns (uint) {\\n        return i_subscriptionId;\\n    }\\n\\n    function getLastTimeStamp() public view returns (uint) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getNumPlayers() public view returns (uint) {\\n        return s_players.length;\\n    }\\n}\\n\",\"keccak256\":\"0x2e3b4ccc275c4a2ab3f481850b2009c9e6af665e1847e9d0b2e76dedc585e3bd\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b5060405162001987380380620019878339818101604052810190620000389190620001d1565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff1660c01b815250508163ffffffff166101208163ffffffff1660e01b815250506000600160146101000a81548160ff021916908360018111156200013d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055504260028190555080610140818152505050505050505062000355565b6000815190506200016f81620002d3565b92915050565b6000815190506200018681620002ed565b92915050565b6000815190506200019d8162000307565b92915050565b600081519050620001b48162000321565b92915050565b600081519050620001cb816200033b565b92915050565b60008060008060008060c08789031215620001eb57600080fd5b6000620001fb89828a016200015e565b96505060206200020e89828a016200018c565b95505060406200022189828a0162000175565b94505060606200023489828a01620001ba565b93505060806200024789828a01620001a3565b92505060a06200025a89828a016200018c565b9150509295509295509295565b6000620002748262000285565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b620002de8162000267565b8114620002ea57600080fd5b50565b620002f8816200027b565b81146200030457600080fd5b50565b6200031281620002a5565b81146200031e57600080fd5b50565b6200032c81620002af565b81146200033857600080fd5b50565b6200034681620002bf565b81146200035257600080fd5b50565b60805160601c60a05160c05160601c60e0516101005160c01c6101205160e01c610140516115af620003d8600039600081816108cd015261093b01526000610733015260008181610710015261096d015260006106ef015260006106b30152600081816102fa01526103f7015260008181610337015261038b01526115af6000f3fe6080604052600436106100c25760003560e01c806353a2c19a1161007f57806391ad27b41161005957806391ad27b414610238578063c1c244e814610263578063de3d9fb71461028e578063e55ae4e8146102b9576100c2565b806353a2c19a146101a457806355c9e926146101cf5780636e04ff0d146101fa576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc539146101465780634585e33b14610150578063473f1ddc14610179575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e991906111f0565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b60405161011491906111d5565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610fc2565b610335565b005b61014e6103f5565b005b34801561015c57600080fd5b5061017760048036038101906101729190610eea565b6105b0565b005b34801561018557600080fd5b5061018e6107fb565b60405161019b919061110e565b60405180910390f35b3480156101b057600080fd5b506101b9610825565b6040516101c691906111f0565b60405180910390f35b3480156101db57600080fd5b506101e4610832565b6040516101f191906111f0565b60405180910390f35b34801561020657600080fd5b50610221600480360381019061021c9190610f2f565b61083e565b60405161022f929190611152565b60405180910390f35b34801561024457600080fd5b5061024d610937565b60405161025a91906111f0565b60405180910390f35b34801561026f57600080fd5b5061027861095f565b60405161028591906111f0565b60405180910390f35b34801561029a57600080fd5b506102a3610969565b6040516102b091906111f0565b60405180910390f35b3480156102c557600080fd5b506102e060048036038101906102db9190610f70565b61099b565b6040516102ed919061110e565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103de929190611129565b60405180910390fd5b6103f18282610a08565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561044f576040517f312bf50b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001811115610489577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600160149054906101000a900460ff1660018111156104d1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14610508576040517f4ff3426e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60006105ca6040518060200160405280600081525061083e565b5090508061065f5747600080549050600160149054906101000a900460ff166001811115610621577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6040517f3a8d60860000000000000000000000000000000000000000000000000000000081526004016106569392919061120b565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156106aa577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610774959493929190611182565b602060405180830381600087803b15801561078e57600080fd5b505af11580156107a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c69190610f99565b9050807f4f696f1fc938074bb61a2063da34e10735cbc8e1589fb1ccf9443c099a59524560405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600161ffff16905090565b60008080549050905090565b600060606000600160149054906101000a900460ff16600181111561088c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600060018111156108c6577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426108fa91906112eb565b1190506000806000805490501190506000804711905083801561091a5750825b80156109235750815b801561092c5750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600254905090565b60007f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff16905090565b60008082815481106109d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000808054905082600081518110610a49577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151610a5b919061144d565b90506000808281548110610a98577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff02191690836001811115610b52577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b0217905550600067ffffffffffffffff811115610b98577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610bc65781602001602082028036833780820191505090505b5060009080519060200190610bdc929190610cd1565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610c0a906110f9565b60006040518083038185875af1925050503d8060008114610c47576040519150601f19603f3d011682016040523d82523d6000602084013e610c4c565b606091505b5050905080610c87576040517f9594d81300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610d4a579160200282015b82811115610d495782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610cf1565b5b509050610d579190610d5b565b5090565b5b80821115610d74576000816000905550600101610d5c565b5090565b6000610d8b610d8684611267565b611242565b90508083825260208201905082856020860282011115610daa57600080fd5b60005b85811015610dda5781610dc08882610ec0565b845260208401935060208301925050600181019050610dad565b5050509392505050565b6000610df7610df284611293565b611242565b905082815260208101848484011115610e0f57600080fd5b610e1a8482856113da565b509392505050565b600082601f830112610e3357600080fd5b8135610e43848260208601610d78565b91505092915050565b60008083601f840112610e5e57600080fd5b8235905067ffffffffffffffff811115610e7757600080fd5b602083019150836001820283011115610e8f57600080fd5b9250929050565b600082601f830112610ea757600080fd5b8135610eb7848260208601610de4565b91505092915050565b600081359050610ecf81611562565b92915050565b600081519050610ee481611562565b92915050565b60008060208385031215610efd57600080fd5b600083013567ffffffffffffffff811115610f1757600080fd5b610f2385828601610e4c565b92509250509250929050565b600060208284031215610f4157600080fd5b600082013567ffffffffffffffff811115610f5b57600080fd5b610f6784828501610e96565b91505092915050565b600060208284031215610f8257600080fd5b6000610f9084828501610ec0565b91505092915050565b600060208284031215610fab57600080fd5b6000610fb984828501610ed5565b91505092915050565b60008060408385031215610fd557600080fd5b6000610fe385828601610ec0565b925050602083013567ffffffffffffffff81111561100057600080fd5b61100c85828601610e22565b9150509250929050565b61101f8161131f565b82525050565b61102e81611331565b82525050565b61103d8161133d565b82525050565b600061104e826112c4565b61105881856112cf565b93506110688185602086016113e9565b6110718161153a565b840191505092915050565b611085816113b6565b82525050565b60006110986000836112e0565b91506110a38261154b565b600082019050919050565b6110b78161135a565b82525050565b6110c6816113c8565b82525050565b6110d581611388565b82525050565b6110e481611392565b82525050565b6110f3816113a2565b82525050565b60006111048261108b565b9150819050919050565b60006020820190506111236000830184611016565b92915050565b600060408201905061113e6000830185611016565b61114b6020830184611016565b9392505050565b60006040820190506111676000830185611025565b81810360208301526111798184611043565b90509392505050565b600060a0820190506111976000830188611034565b6111a460208301876110ea565b6111b160408301866110ae565b6111be60608301856110db565b6111cb60808301846110bd565b9695505050505050565b60006020820190506111ea600083018461107c565b92915050565b600060208201905061120560008301846110cc565b92915050565b600060608201905061122060008301866110cc565b61122d60208301856110cc565b61123a60408301846110cc565b949350505050565b600061124c61125d565b9050611258828261141c565b919050565b6000604051905090565b600067ffffffffffffffff8211156112825761128161150b565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156112ae576112ad61150b565b5b6112b78261153a565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006112f682611388565b915061130183611388565b9250828210156113145761131361147e565b5b828203905092915050565b600061132a82611368565b9050919050565b60008115159050919050565b6000819050919050565b60008190506113558261154e565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006113c182611347565b9050919050565b60006113d38261135a565b9050919050565b82818337600083830152505050565b60005b838110156114075780820151818401526020810190506113ec565b83811115611416576000848401525b50505050565b6114258261153a565b810181811067ffffffffffffffff821117156114445761144361150b565b5b80604052505050565b600061145882611388565b915061146383611388565b925082611473576114726114ad565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b50565b6002811061155f5761155e6114dc565b5b50565b61156b81611388565b811461157657600080fd5b5056fea2646970667358221220e3793fa0635b9d17f0ae4c5a4df4aa1788052eda8299d3c5067adda73fdb9ded64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c806353a2c19a1161007f57806391ad27b41161005957806391ad27b414610238578063c1c244e814610263578063de3d9fb71461028e578063e55ae4e8146102b9576100c2565b806353a2c19a146101a457806355c9e926146101cf5780636e04ff0d146101fa576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc539146101465780634585e33b14610150578063473f1ddc14610179575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e991906111f0565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b60405161011491906111d5565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610fc2565b610335565b005b61014e6103f5565b005b34801561015c57600080fd5b5061017760048036038101906101729190610eea565b6105b0565b005b34801561018557600080fd5b5061018e6107fb565b60405161019b919061110e565b60405180910390f35b3480156101b057600080fd5b506101b9610825565b6040516101c691906111f0565b60405180910390f35b3480156101db57600080fd5b506101e4610832565b6040516101f191906111f0565b60405180910390f35b34801561020657600080fd5b50610221600480360381019061021c9190610f2f565b61083e565b60405161022f929190611152565b60405180910390f35b34801561024457600080fd5b5061024d610937565b60405161025a91906111f0565b60405180910390f35b34801561026f57600080fd5b5061027861095f565b60405161028591906111f0565b60405180910390f35b34801561029a57600080fd5b506102a3610969565b6040516102b091906111f0565b60405180910390f35b3480156102c557600080fd5b506102e060048036038101906102db9190610f70565b61099b565b6040516102ed919061110e565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103de929190611129565b60405180910390fd5b6103f18282610a08565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561044f576040517f312bf50b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001811115610489577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600160149054906101000a900460ff1660018111156104d1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14610508576040517f4ff3426e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60006105ca6040518060200160405280600081525061083e565b5090508061065f5747600080549050600160149054906101000a900460ff166001811115610621577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6040517f3a8d60860000000000000000000000000000000000000000000000000000000081526004016106569392919061120b565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156106aa577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610774959493929190611182565b602060405180830381600087803b15801561078e57600080fd5b505af11580156107a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c69190610f99565b9050807f4f696f1fc938074bb61a2063da34e10735cbc8e1589fb1ccf9443c099a59524560405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600161ffff16905090565b60008080549050905090565b600060606000600160149054906101000a900460ff16600181111561088c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600060018111156108c6577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426108fa91906112eb565b1190506000806000805490501190506000804711905083801561091a5750825b80156109235750815b801561092c5750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600254905090565b60007f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff16905090565b60008082815481106109d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000808054905082600081518110610a49577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151610a5b919061144d565b90506000808281548110610a98577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff02191690836001811115610b52577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b0217905550600067ffffffffffffffff811115610b98577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610bc65781602001602082028036833780820191505090505b5060009080519060200190610bdc929190610cd1565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610c0a906110f9565b60006040518083038185875af1925050503d8060008114610c47576040519150601f19603f3d011682016040523d82523d6000602084013e610c4c565b606091505b5050905080610c87576040517f9594d81300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610d4a579160200282015b82811115610d495782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610cf1565b5b509050610d579190610d5b565b5090565b5b80821115610d74576000816000905550600101610d5c565b5090565b6000610d8b610d8684611267565b611242565b90508083825260208201905082856020860282011115610daa57600080fd5b60005b85811015610dda5781610dc08882610ec0565b845260208401935060208301925050600181019050610dad565b5050509392505050565b6000610df7610df284611293565b611242565b905082815260208101848484011115610e0f57600080fd5b610e1a8482856113da565b509392505050565b600082601f830112610e3357600080fd5b8135610e43848260208601610d78565b91505092915050565b60008083601f840112610e5e57600080fd5b8235905067ffffffffffffffff811115610e7757600080fd5b602083019150836001820283011115610e8f57600080fd5b9250929050565b600082601f830112610ea757600080fd5b8135610eb7848260208601610de4565b91505092915050565b600081359050610ecf81611562565b92915050565b600081519050610ee481611562565b92915050565b60008060208385031215610efd57600080fd5b600083013567ffffffffffffffff811115610f1757600080fd5b610f2385828601610e4c565b92509250509250929050565b600060208284031215610f4157600080fd5b600082013567ffffffffffffffff811115610f5b57600080fd5b610f6784828501610e96565b91505092915050565b600060208284031215610f8257600080fd5b6000610f9084828501610ec0565b91505092915050565b600060208284031215610fab57600080fd5b6000610fb984828501610ed5565b91505092915050565b60008060408385031215610fd557600080fd5b6000610fe385828601610ec0565b925050602083013567ffffffffffffffff81111561100057600080fd5b61100c85828601610e22565b9150509250929050565b61101f8161131f565b82525050565b61102e81611331565b82525050565b61103d8161133d565b82525050565b600061104e826112c4565b61105881856112cf565b93506110688185602086016113e9565b6110718161153a565b840191505092915050565b611085816113b6565b82525050565b60006110986000836112e0565b91506110a38261154b565b600082019050919050565b6110b78161135a565b82525050565b6110c6816113c8565b82525050565b6110d581611388565b82525050565b6110e481611392565b82525050565b6110f3816113a2565b82525050565b60006111048261108b565b9150819050919050565b60006020820190506111236000830184611016565b92915050565b600060408201905061113e6000830185611016565b61114b6020830184611016565b9392505050565b60006040820190506111676000830185611025565b81810360208301526111798184611043565b90509392505050565b600060a0820190506111976000830188611034565b6111a460208301876110ea565b6111b160408301866110ae565b6111be60608301856110db565b6111cb60808301846110bd565b9695505050505050565b60006020820190506111ea600083018461107c565b92915050565b600060208201905061120560008301846110cc565b92915050565b600060608201905061122060008301866110cc565b61122d60208301856110cc565b61123a60408301846110cc565b949350505050565b600061124c61125d565b9050611258828261141c565b919050565b6000604051905090565b600067ffffffffffffffff8211156112825761128161150b565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156112ae576112ad61150b565b5b6112b78261153a565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006112f682611388565b915061130183611388565b9250828210156113145761131361147e565b5b828203905092915050565b600061132a82611368565b9050919050565b60008115159050919050565b6000819050919050565b60008190506113558261154e565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006113c182611347565b9050919050565b60006113d38261135a565b9050919050565b82818337600083830152505050565b60005b838110156114075780820151818401526020810190506113ec565b83811115611416576000848401525b50505050565b6114258261153a565b810181811067ffffffffffffffff821117156114445761144361150b565b5b80604052505050565b600061145882611388565b915061146383611388565b925082611473576114726114ad565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b50565b6002811061155f5761155e6114dc565b5b50565b61156b81611388565b811461157657600080fd5b5056fea2646970667358221220e3793fa0635b9d17f0ae4c5a4df4aa1788052eda8299d3c5067adda73fdb9ded64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "This is the function that Chainlink Keepers call they look for the `upkeepNeeded` to return true. The following should be true in order to return true 1.Our time interval should have passed. 2.The lottery should have atleast one player and some ETH 3.Our subscription should be funded with LINK 4.Lottery state should be open"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 870,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 887,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 890,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_RaffleState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(RaffleState)865"
      },
      {
        "astId": 892,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)865": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}